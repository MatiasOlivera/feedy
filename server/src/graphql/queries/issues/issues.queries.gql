type Query {
  """
  Fetch an issue by its id
  """
  issue(id: ID!): Issue

  """
  Fetch a list of issues
  """
  issues(
    search: String
    first: Int
    after: ID
    last: Int
    before: ID
    orderBy: IssueOrderBy = { field: createdAt, direction: DESC }
    where: IssueWhere = { deleted: false }
  ): IssueConnection
}

type IssueConnection {
  pageInfo: PageInfo!
  edges: [IssueEdge!]!
  total: Int
}

type IssueEdge {
  node: Issue!
  cursor: String!
}

input IssueOrderBy {
  field: ISSUE_FIELD
  direction: ORDER
}

enum ISSUE_FIELD {
  id
  title
  createdAt
  updatedAt
  deletedAt
}

input IssueWhere {
  deleted: Boolean
}
