type Query {
  """
  Fetch a comment by its id
  """
  comment(id: ID!): Comment

  """
  Fetch a list of comments
  """
  comments(
    pagination: Pagination
    orderBy: CommentOrderBy = { field: createdAt, direction: DESC }
    where: CommentWhere = { deleted: false }
  ): CommentConnection
}

type CommentConnection {
  pageInfo: PageInfo!
  edges: [CommentEdge]!
  total: Int
}

type CommentEdge {
  node: Comment!
  cursor: String!
}

input CommentOrderBy {
  field: COMMENT_FIELD
  direction: ORDER
}

enum COMMENT_FIELD {
  id
  body
  createdAt
  updatedAt
  deletedAt
}

input CommentWhere {
  deleted: Boolean
}
