type Query {
  """
  Fetch an organization by its id
  """
  organization(id: ID!): Organization

  """
  Fetch a list of organizations
  """
  organizations(
    search: String
    pagination: Pagination = { first: 10 }
    orderBy: OrganizationOrderBy = { field: name, direction: ASC }
    where: OrganizationWhere = { deleted: false }
  ): OrganizationConnection
}

type OrganizationConnection {
  pageInfo: PageInfo!
  edges: [OrganizationEdge!]!
  count: Int
  total: Int
}

type OrganizationEdge {
  node: Organization!
  cursor: String!
}

input OrganizationOrderBy {
  field: ORGANIZATION_FIELD
  direction: ORDER
}

enum ORGANIZATION_FIELD {
  name
  createdAt
  updatedAt
  deletedAt
}

input OrganizationWhere {
  deleted: Boolean
}
