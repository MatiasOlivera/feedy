// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from 'graphql';
import {
  Comment,
  User,
  Product,
  Organization,
  Issue,
  CommentConnection,
  PageInfo,
  CommentEdge,
  IssueConnection,
  IssueEdge,
  OrganizationConnection,
  OrganizationEdge,
  ProductConnection,
  ProductEdge,
  UserConnection,
  UserEdge
} from '../database/prisma-client/index';
import {
  CreateCommentPayload,
  Operation,
  CreateCommentValidation,
  SimpleCommentPayload,
  UpdateCommentPayload,
  UpdateCommentValidation,
  IssuePayload,
  IssueValidation,
  SimpleIssuePayload,
  OrganizationPayload,
  OrganizationValidation,
  SimpleOrganizationPayload,
  ProductPayload,
  ProductValidation,
  SimpleProductPayload,
  CreateUserPayload,
  CreateUserValidation,
  SimpleUserPayload,
  UpdateUserPayload,
  UpdateUserValidation
} from './models.types';
import { Context } from './graphql.types';

type CommentField = 'body' | 'createdAt' | 'updatedAt' | 'deletedAt';
type ORDER = 'ASC' | 'DESC';
type IssueField = 'title' | 'createdAt' | 'updatedAt' | 'deletedAt';
type OrganizationField = 'name' | 'createdAt' | 'updatedAt' | 'deletedAt';
type ProductField = 'name' | 'createdAt' | 'updatedAt' | 'deletedAt';
type UserField =
  | 'firstName'
  | 'lastName'
  | 'username'
  | 'email'
  | 'createdAt'
  | 'updatedAt'
  | 'deletedAt';

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface Pagination {
    first: number | null;
    after: string | null;
    last: number | null;
    before: string | null;
  }
  export interface CommentOrderBy {
    field: CommentField | null;
    direction: ORDER | null;
  }
  export interface CommentWhere {
    deleted: boolean | null;
  }
  export interface IssueOrderBy {
    field: IssueField | null;
    direction: ORDER | null;
  }
  export interface IssueWhere {
    deleted: boolean | null;
  }
  export interface OrganizationOrderBy {
    field: OrganizationField | null;
    direction: ORDER | null;
  }
  export interface OrganizationWhere {
    deleted: boolean | null;
  }
  export interface ProductOrderBy {
    field: ProductField | null;
    direction: ORDER | null;
  }
  export interface ProductWhere {
    deleted: boolean | null;
  }
  export interface UserOrderBy {
    field: UserField | null;
    direction: ORDER | null;
  }
  export interface UserWhere {
    deleted: boolean | null;
  }

  export interface ArgsComment {
    id: string;
  }

  export interface ArgsComments {
    pagination: Pagination | null;
    orderBy: CommentOrderBy | null;
    where: CommentWhere | null;
  }

  export interface ArgsIssue {
    id: string;
  }

  export interface ArgsIssues {
    search: string | null;
    pagination: Pagination | null;
    orderBy: IssueOrderBy | null;
    where: IssueWhere | null;
  }

  export interface ArgsOrganization {
    id: string;
  }

  export interface ArgsOrganizations {
    search: string | null;
    pagination: Pagination | null;
    orderBy: OrganizationOrderBy | null;
    where: OrganizationWhere | null;
  }

  export interface ArgsProduct {
    id: string;
  }

  export interface ArgsProducts {
    search: string | null;
    pagination: Pagination | null;
    orderBy: ProductOrderBy | null;
    where: ProductWhere | null;
  }

  export interface ArgsUser {
    id: string;
  }

  export interface ArgsUsers {
    search: string | null;
    pagination: Pagination | null;
    orderBy: UserOrderBy | null;
    where: UserWhere | null;
  }

  export type CommentResolver = (
    parent: undefined,
    args: ArgsComment,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Comment | null | Promise<Comment | null>;

  export type CommentsResolver = (
    parent: undefined,
    args: ArgsComments,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => CommentConnection | null | Promise<CommentConnection | null>;

  export type IssueResolver = (
    parent: undefined,
    args: ArgsIssue,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Issue | null | Promise<Issue | null>;

  export type IssuesResolver = (
    parent: undefined,
    args: ArgsIssues,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => IssueConnection | null | Promise<IssueConnection | null>;

  export type OrganizationResolver = (
    parent: undefined,
    args: ArgsOrganization,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Organization | null | Promise<Organization | null>;

  export type OrganizationsResolver = (
    parent: undefined,
    args: ArgsOrganizations,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => OrganizationConnection | null | Promise<OrganizationConnection | null>;

  export type ProductResolver = (
    parent: undefined,
    args: ArgsProduct,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Product | null | Promise<Product | null>;

  export type ProductsResolver = (
    parent: undefined,
    args: ArgsProducts,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => ProductConnection | null | Promise<ProductConnection | null>;

  export type UserResolver = (
    parent: undefined,
    args: ArgsUser,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>;

  export type UsersResolver = (
    parent: undefined,
    args: ArgsUsers,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => UserConnection | null | Promise<UserConnection | null>;

  export interface Type {
    comment: (
      parent: undefined,
      args: ArgsComment,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Comment | null | Promise<Comment | null>;

    comments: (
      parent: undefined,
      args: ArgsComments,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => CommentConnection | null | Promise<CommentConnection | null>;

    issue: (
      parent: undefined,
      args: ArgsIssue,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Issue | null | Promise<Issue | null>;

    issues: (
      parent: undefined,
      args: ArgsIssues,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => IssueConnection | null | Promise<IssueConnection | null>;

    organization: (
      parent: undefined,
      args: ArgsOrganization,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Organization | null | Promise<Organization | null>;

    organizations: (
      parent: undefined,
      args: ArgsOrganizations,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => OrganizationConnection | null | Promise<OrganizationConnection | null>;

    product: (
      parent: undefined,
      args: ArgsProduct,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Product | null | Promise<Product | null>;

    products: (
      parent: undefined,
      args: ArgsProducts,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => ProductConnection | null | Promise<ProductConnection | null>;

    user: (
      parent: undefined,
      args: ArgsUser,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | null | Promise<User | null>;

    users: (
      parent: undefined,
      args: ArgsUsers,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => UserConnection | null | Promise<UserConnection | null>;
  }
}

export namespace CommentResolvers {
  export const defaultResolvers = {
    id: (parent: Comment) => parent.id,
    body: (parent: Comment) => parent.body,
    createdAt: (parent: Comment) => parent.createdAt,
    updatedAt: (parent: Comment) => parent.updatedAt,
    deletedAt: (parent: Comment) =>
      parent.deletedAt === undefined ? null : parent.deletedAt
  };

  export type IdResolver = (
    parent: Comment,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type BodyResolver = (
    parent: Comment,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type CreatedAtResolver = (
    parent: Comment,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UpdatedAtResolver = (
    parent: Comment,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type DeletedAtResolver = (
    parent: Comment,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type AuthorResolver = (
    parent: Comment,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;

  export type IssueResolver = (
    parent: Comment,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Issue | null | Promise<Issue | null>;

  export type ParentResolver = (
    parent: Comment,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Comment | null | Promise<Comment | null>;

  export type ChildrenResolver = (
    parent: Comment,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Comment[] | Promise<Comment[]>;

  export interface Type {
    id: (
      parent: Comment,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    body: (
      parent: Comment,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    createdAt: (
      parent: Comment,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    updatedAt: (
      parent: Comment,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    deletedAt: (
      parent: Comment,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    author: (
      parent: Comment,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | Promise<User>;

    issue: (
      parent: Comment,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Issue | null | Promise<Issue | null>;

    parent: (
      parent: Comment,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Comment | null | Promise<Comment | null>;

    children: (
      parent: Comment,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Comment[] | Promise<Comment[]>;
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: User) => parent.id,
    firstName: (parent: User) => parent.firstName,
    lastName: (parent: User) => parent.lastName,
    gender: (parent: User) => parent.gender,
    username: (parent: User) => parent.username,
    email: (parent: User) => parent.email,
    bio: (parent: User) => (parent.bio === undefined ? null : parent.bio),
    createdAt: (parent: User) => parent.createdAt,
    updatedAt: (parent: User) => parent.updatedAt,
    deletedAt: (parent: User) =>
      parent.deletedAt === undefined ? null : parent.deletedAt
  };

  export type IdResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type FirstNameResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type LastNameResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type FullNameResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type GenderResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UsernameResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type EmailResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type BioResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type CreatedAtResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UpdatedAtResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type DeletedAtResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type ProductsResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Product[] | Promise<Product[]>;

  export type OrganizationsResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Organization[] | Promise<Organization[]>;

  export type IssuesResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Issue[] | Promise<Issue[]>;

  export type CommentsResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Comment[] | Promise<Comment[]>;

  export interface Type {
    id: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    firstName: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    lastName: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    fullName: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    gender: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    username: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    email: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    bio: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    createdAt: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    updatedAt: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    deletedAt: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    products: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Product[] | Promise<Product[]>;

    organizations: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Organization[] | Promise<Organization[]>;

    issues: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Issue[] | Promise<Issue[]>;

    comments: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Comment[] | Promise<Comment[]>;
  }
}

export namespace ProductResolvers {
  export const defaultResolvers = {
    id: (parent: Product) => parent.id,
    name: (parent: Product) => parent.name,
    description: (parent: Product) =>
      parent.description === undefined ? null : parent.description,
    createdAt: (parent: Product) => parent.createdAt,
    updatedAt: (parent: Product) => parent.updatedAt,
    deletedAt: (parent: Product) =>
      parent.deletedAt === undefined ? null : parent.deletedAt
  };

  export type IdResolver = (
    parent: Product,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: Product,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type DescriptionResolver = (
    parent: Product,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type CreatedAtResolver = (
    parent: Product,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UpdatedAtResolver = (
    parent: Product,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type DeletedAtResolver = (
    parent: Product,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type OwnerResolver = (
    parent: Product,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => {} | Promise<{}>;

  export type IssuesResolver = (
    parent: Product,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Issue[] | Promise<Issue[]>;

  export interface Type {
    id: (
      parent: Product,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: Product,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    description: (
      parent: Product,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    createdAt: (
      parent: Product,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    updatedAt: (
      parent: Product,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    deletedAt: (
      parent: Product,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    owner: (
      parent: Product,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => {} | Promise<{}>;

    issues: (
      parent: Product,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Issue[] | Promise<Issue[]>;
  }
}

export namespace OrganizationResolvers {
  export const defaultResolvers = {
    id: (parent: Organization) => parent.id,
    name: (parent: Organization) => parent.name,
    bio: (parent: Organization) =>
      parent.bio === undefined ? null : parent.bio,
    createdAt: (parent: Organization) => parent.createdAt,
    updatedAt: (parent: Organization) => parent.updatedAt,
    deletedAt: (parent: Organization) =>
      parent.deletedAt === undefined ? null : parent.deletedAt
  };

  export type IdResolver = (
    parent: Organization,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: Organization,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type BioResolver = (
    parent: Organization,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type CreatedAtResolver = (
    parent: Organization,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UpdatedAtResolver = (
    parent: Organization,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type DeletedAtResolver = (
    parent: Organization,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type ProductsResolver = (
    parent: Organization,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Product[] | Promise<Product[]>;

  export type MembersResolver = (
    parent: Organization,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User[] | Promise<User[]>;

  export interface Type {
    id: (
      parent: Organization,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: Organization,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    bio: (
      parent: Organization,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    createdAt: (
      parent: Organization,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    updatedAt: (
      parent: Organization,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    deletedAt: (
      parent: Organization,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    products: (
      parent: Organization,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Product[] | Promise<Product[]>;

    members: (
      parent: Organization,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User[] | Promise<User[]>;
  }
}

export namespace IssueResolvers {
  export const defaultResolvers = {
    id: (parent: Issue) => parent.id,
    title: (parent: Issue) => parent.title,
    body: (parent: Issue) => parent.body,
    createdAt: (parent: Issue) => parent.createdAt,
    updatedAt: (parent: Issue) => parent.updatedAt,
    deletedAt: (parent: Issue) =>
      parent.deletedAt === undefined ? null : parent.deletedAt
  };

  export type IdResolver = (
    parent: Issue,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type TitleResolver = (
    parent: Issue,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type BodyResolver = (
    parent: Issue,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type CreatedAtResolver = (
    parent: Issue,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UpdatedAtResolver = (
    parent: Issue,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type DeletedAtResolver = (
    parent: Issue,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type AuthorResolver = (
    parent: Issue,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;

  export type ProductResolver = (
    parent: Issue,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Product | Promise<Product>;

  export type CommentsResolver = (
    parent: Issue,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Comment[] | Promise<Comment[]>;

  export interface Type {
    id: (
      parent: Issue,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    title: (
      parent: Issue,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    body: (
      parent: Issue,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    createdAt: (
      parent: Issue,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    updatedAt: (
      parent: Issue,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    deletedAt: (
      parent: Issue,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    author: (
      parent: Issue,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | Promise<User>;

    product: (
      parent: Issue,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Product | Promise<Product>;

    comments: (
      parent: Issue,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Comment[] | Promise<Comment[]>;
  }
}

export namespace CommentConnectionResolvers {
  export const defaultResolvers = {
    pageInfo: (parent: CommentConnection) => parent.pageInfo,
    edges: (parent: CommentConnection) => parent.edges
  };

  export type PageInfoResolver = (
    parent: CommentConnection,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => PageInfo | Promise<PageInfo>;

  export type EdgesResolver = (
    parent: CommentConnection,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => CommentEdge[] | Promise<CommentEdge[]>;

  export type TotalResolver = (
    parent: CommentConnection,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export interface Type {
    pageInfo: (
      parent: CommentConnection,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => PageInfo | Promise<PageInfo>;

    edges: (
      parent: CommentConnection,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => CommentEdge[] | Promise<CommentEdge[]>;

    total: (
      parent: CommentConnection,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;
  }
}

export namespace PageInfoResolvers {
  export const defaultResolvers = {
    hasNextPage: (parent: PageInfo) => parent.hasNextPage,
    hasPreviousPage: (parent: PageInfo) => parent.hasPreviousPage,
    startCursor: (parent: PageInfo) =>
      parent.startCursor === undefined ? null : parent.startCursor,
    endCursor: (parent: PageInfo) =>
      parent.endCursor === undefined ? null : parent.endCursor
  };

  export type HasNextPageResolver = (
    parent: PageInfo,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export type HasPreviousPageResolver = (
    parent: PageInfo,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export type StartCursorResolver = (
    parent: PageInfo,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type EndCursorResolver = (
    parent: PageInfo,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export interface Type {
    hasNextPage: (
      parent: PageInfo,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;

    hasPreviousPage: (
      parent: PageInfo,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;

    startCursor: (
      parent: PageInfo,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    endCursor: (
      parent: PageInfo,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;
  }
}

export namespace CommentEdgeResolvers {
  export const defaultResolvers = {
    node: (parent: CommentEdge) => parent.node,
    cursor: (parent: CommentEdge) => parent.cursor
  };

  export type NodeResolver = (
    parent: CommentEdge,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Comment | Promise<Comment>;

  export type CursorResolver = (
    parent: CommentEdge,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    node: (
      parent: CommentEdge,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Comment | Promise<Comment>;

    cursor: (
      parent: CommentEdge,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export namespace IssueConnectionResolvers {
  export const defaultResolvers = {
    pageInfo: (parent: IssueConnection) => parent.pageInfo,
    edges: (parent: IssueConnection) => parent.edges
  };

  export type PageInfoResolver = (
    parent: IssueConnection,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => PageInfo | Promise<PageInfo>;

  export type EdgesResolver = (
    parent: IssueConnection,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => IssueEdge[] | Promise<IssueEdge[]>;

  export type TotalResolver = (
    parent: IssueConnection,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export interface Type {
    pageInfo: (
      parent: IssueConnection,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => PageInfo | Promise<PageInfo>;

    edges: (
      parent: IssueConnection,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => IssueEdge[] | Promise<IssueEdge[]>;

    total: (
      parent: IssueConnection,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;
  }
}

export namespace IssueEdgeResolvers {
  export const defaultResolvers = {
    node: (parent: IssueEdge) => parent.node,
    cursor: (parent: IssueEdge) => parent.cursor
  };

  export type NodeResolver = (
    parent: IssueEdge,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Issue | Promise<Issue>;

  export type CursorResolver = (
    parent: IssueEdge,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    node: (
      parent: IssueEdge,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Issue | Promise<Issue>;

    cursor: (
      parent: IssueEdge,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export namespace OrganizationConnectionResolvers {
  export const defaultResolvers = {
    pageInfo: (parent: OrganizationConnection) => parent.pageInfo,
    edges: (parent: OrganizationConnection) => parent.edges
  };

  export type PageInfoResolver = (
    parent: OrganizationConnection,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => PageInfo | Promise<PageInfo>;

  export type EdgesResolver = (
    parent: OrganizationConnection,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => OrganizationEdge[] | Promise<OrganizationEdge[]>;

  export type CountResolver = (
    parent: OrganizationConnection,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type TotalResolver = (
    parent: OrganizationConnection,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export interface Type {
    pageInfo: (
      parent: OrganizationConnection,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => PageInfo | Promise<PageInfo>;

    edges: (
      parent: OrganizationConnection,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => OrganizationEdge[] | Promise<OrganizationEdge[]>;

    count: (
      parent: OrganizationConnection,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    total: (
      parent: OrganizationConnection,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;
  }
}

export namespace OrganizationEdgeResolvers {
  export const defaultResolvers = {
    node: (parent: OrganizationEdge) => parent.node,
    cursor: (parent: OrganizationEdge) => parent.cursor
  };

  export type NodeResolver = (
    parent: OrganizationEdge,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Organization | Promise<Organization>;

  export type CursorResolver = (
    parent: OrganizationEdge,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    node: (
      parent: OrganizationEdge,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Organization | Promise<Organization>;

    cursor: (
      parent: OrganizationEdge,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export namespace ProductConnectionResolvers {
  export const defaultResolvers = {
    pageInfo: (parent: ProductConnection) => parent.pageInfo,
    edges: (parent: ProductConnection) => parent.edges
  };

  export type PageInfoResolver = (
    parent: ProductConnection,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => PageInfo | Promise<PageInfo>;

  export type EdgesResolver = (
    parent: ProductConnection,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => ProductEdge[] | Promise<ProductEdge[]>;

  export type CountResolver = (
    parent: ProductConnection,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type TotalResolver = (
    parent: ProductConnection,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export interface Type {
    pageInfo: (
      parent: ProductConnection,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => PageInfo | Promise<PageInfo>;

    edges: (
      parent: ProductConnection,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => ProductEdge[] | Promise<ProductEdge[]>;

    count: (
      parent: ProductConnection,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    total: (
      parent: ProductConnection,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;
  }
}

export namespace ProductEdgeResolvers {
  export const defaultResolvers = {
    node: (parent: ProductEdge) => parent.node,
    cursor: (parent: ProductEdge) => parent.cursor
  };

  export type NodeResolver = (
    parent: ProductEdge,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Product | Promise<Product>;

  export type CursorResolver = (
    parent: ProductEdge,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    node: (
      parent: ProductEdge,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Product | Promise<Product>;

    cursor: (
      parent: ProductEdge,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export namespace UserConnectionResolvers {
  export const defaultResolvers = {
    pageInfo: (parent: UserConnection) => parent.pageInfo,
    edges: (parent: UserConnection) => parent.edges
  };

  export type PageInfoResolver = (
    parent: UserConnection,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => PageInfo | Promise<PageInfo>;

  export type EdgesResolver = (
    parent: UserConnection,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => UserEdge[] | Promise<UserEdge[]>;

  export type CountResolver = (
    parent: UserConnection,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type TotalResolver = (
    parent: UserConnection,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export interface Type {
    pageInfo: (
      parent: UserConnection,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => PageInfo | Promise<PageInfo>;

    edges: (
      parent: UserConnection,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => UserEdge[] | Promise<UserEdge[]>;

    count: (
      parent: UserConnection,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    total: (
      parent: UserConnection,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;
  }
}

export namespace UserEdgeResolvers {
  export const defaultResolvers = {
    node: (parent: UserEdge) => parent.node,
    cursor: (parent: UserEdge) => parent.cursor
  };

  export type NodeResolver = (
    parent: UserEdge,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;

  export type CursorResolver = (
    parent: UserEdge,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    node: (
      parent: UserEdge,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | Promise<User>;

    cursor: (
      parent: UserEdge,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface CreateCommentInput {
    body: string;
    userId: string;
    issueId: string;
    parentId: string | null;
  }
  export interface UpdateCommentInput {
    body: string;
  }
  export interface CreateIssueInput {
    title: string;
    body: string;
    userId: string;
    productId: string;
  }
  export interface UpdateIssueInput {
    title: string | null;
    body: string | null;
    userId: string | null;
    productId: string | null;
  }
  export interface CreateOrganizationInput {
    name: string;
    bio: string | null;
  }
  export interface UpdateOrganizationInput {
    name: string | null;
    bio: string | null;
  }
  export interface CreateProductInput {
    name: string;
    description: string | null;
    ownerId: string;
  }
  export interface UpdateProductInput {
    name: string | null;
    description: string | null;
    ownerId: string | null;
  }
  export interface CreateUserInput {
    firstName: string;
    lastName: string;
    gender: string;
    username: string;
    password: string;
    passwordConfirmation: string;
    email: string;
    bio: string | null;
  }
  export interface UpdateUserInput {
    firstName: string | null;
    lastName: string | null;
    gender: string | null;
    username: string | null;
    email: string | null;
    bio: string | null;
  }

  export interface ArgsCreateComment {
    comment: CreateCommentInput;
  }

  export interface ArgsDeleteComment {
    id: string;
  }

  export interface ArgsRestoreComment {
    id: string;
  }

  export interface ArgsUpdateComment {
    id: string;
    comment: UpdateCommentInput;
  }

  export interface ArgsCreateIssue {
    issue: CreateIssueInput;
  }

  export interface ArgsDeleteIssue {
    id: string;
  }

  export interface ArgsRestoreIssue {
    id: string;
  }

  export interface ArgsUpdateIssue {
    id: string;
    issue: UpdateIssueInput;
  }

  export interface ArgsCreateOrganization {
    org: CreateOrganizationInput;
  }

  export interface ArgsDeleteOrganization {
    id: string;
  }

  export interface ArgsRestoreOrganization {
    id: string;
  }

  export interface ArgsUpdateOrganization {
    id: string;
    org: UpdateOrganizationInput;
  }

  export interface ArgsCreateProduct {
    product: CreateProductInput;
  }

  export interface ArgsDeleteProduct {
    id: string;
  }

  export interface ArgsRestoreProduct {
    id: string;
  }

  export interface ArgsUpdateProduct {
    id: string;
    product: UpdateProductInput;
  }

  export interface ArgsCreateUser {
    user: CreateUserInput;
  }

  export interface ArgsDeleteUser {
    id: string;
  }

  export interface ArgsRestoreUser {
    id: string;
  }

  export interface ArgsUpdateUser {
    id: string;
    user: UpdateUserInput;
  }

  export type CreateCommentResolver = (
    parent: undefined,
    args: ArgsCreateComment,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => CreateCommentPayload | null | Promise<CreateCommentPayload | null>;

  export type DeleteCommentResolver = (
    parent: undefined,
    args: ArgsDeleteComment,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => SimpleCommentPayload | null | Promise<SimpleCommentPayload | null>;

  export type RestoreCommentResolver = (
    parent: undefined,
    args: ArgsRestoreComment,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => SimpleCommentPayload | null | Promise<SimpleCommentPayload | null>;

  export type UpdateCommentResolver = (
    parent: undefined,
    args: ArgsUpdateComment,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => UpdateCommentPayload | null | Promise<UpdateCommentPayload | null>;

  export type CreateIssueResolver = (
    parent: undefined,
    args: ArgsCreateIssue,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => IssuePayload | null | Promise<IssuePayload | null>;

  export type DeleteIssueResolver = (
    parent: undefined,
    args: ArgsDeleteIssue,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => SimpleIssuePayload | null | Promise<SimpleIssuePayload | null>;

  export type RestoreIssueResolver = (
    parent: undefined,
    args: ArgsRestoreIssue,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => SimpleIssuePayload | null | Promise<SimpleIssuePayload | null>;

  export type UpdateIssueResolver = (
    parent: undefined,
    args: ArgsUpdateIssue,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => IssuePayload | null | Promise<IssuePayload | null>;

  export type CreateOrganizationResolver = (
    parent: undefined,
    args: ArgsCreateOrganization,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => OrganizationPayload | null | Promise<OrganizationPayload | null>;

  export type DeleteOrganizationResolver = (
    parent: undefined,
    args: ArgsDeleteOrganization,
    ctx: Context,
    info: GraphQLResolveInfo
  ) =>
    | SimpleOrganizationPayload
    | null
    | Promise<SimpleOrganizationPayload | null>;

  export type RestoreOrganizationResolver = (
    parent: undefined,
    args: ArgsRestoreOrganization,
    ctx: Context,
    info: GraphQLResolveInfo
  ) =>
    | SimpleOrganizationPayload
    | null
    | Promise<SimpleOrganizationPayload | null>;

  export type UpdateOrganizationResolver = (
    parent: undefined,
    args: ArgsUpdateOrganization,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => OrganizationPayload | null | Promise<OrganizationPayload | null>;

  export type CreateProductResolver = (
    parent: undefined,
    args: ArgsCreateProduct,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => ProductPayload | null | Promise<ProductPayload | null>;

  export type DeleteProductResolver = (
    parent: undefined,
    args: ArgsDeleteProduct,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => SimpleProductPayload | null | Promise<SimpleProductPayload | null>;

  export type RestoreProductResolver = (
    parent: undefined,
    args: ArgsRestoreProduct,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => SimpleProductPayload | null | Promise<SimpleProductPayload | null>;

  export type UpdateProductResolver = (
    parent: undefined,
    args: ArgsUpdateProduct,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => ProductPayload | null | Promise<ProductPayload | null>;

  export type CreateUserResolver = (
    parent: undefined,
    args: ArgsCreateUser,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => CreateUserPayload | null | Promise<CreateUserPayload | null>;

  export type DeleteUserResolver = (
    parent: undefined,
    args: ArgsDeleteUser,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => SimpleUserPayload | null | Promise<SimpleUserPayload | null>;

  export type RestoreUserResolver = (
    parent: undefined,
    args: ArgsRestoreUser,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => SimpleUserPayload | null | Promise<SimpleUserPayload | null>;

  export type UpdateUserResolver = (
    parent: undefined,
    args: ArgsUpdateUser,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => UpdateUserPayload | null | Promise<UpdateUserPayload | null>;

  export interface Type {
    createComment: (
      parent: undefined,
      args: ArgsCreateComment,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => CreateCommentPayload | null | Promise<CreateCommentPayload | null>;

    deleteComment: (
      parent: undefined,
      args: ArgsDeleteComment,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => SimpleCommentPayload | null | Promise<SimpleCommentPayload | null>;

    restoreComment: (
      parent: undefined,
      args: ArgsRestoreComment,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => SimpleCommentPayload | null | Promise<SimpleCommentPayload | null>;

    updateComment: (
      parent: undefined,
      args: ArgsUpdateComment,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => UpdateCommentPayload | null | Promise<UpdateCommentPayload | null>;

    createIssue: (
      parent: undefined,
      args: ArgsCreateIssue,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => IssuePayload | null | Promise<IssuePayload | null>;

    deleteIssue: (
      parent: undefined,
      args: ArgsDeleteIssue,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => SimpleIssuePayload | null | Promise<SimpleIssuePayload | null>;

    restoreIssue: (
      parent: undefined,
      args: ArgsRestoreIssue,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => SimpleIssuePayload | null | Promise<SimpleIssuePayload | null>;

    updateIssue: (
      parent: undefined,
      args: ArgsUpdateIssue,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => IssuePayload | null | Promise<IssuePayload | null>;

    createOrganization: (
      parent: undefined,
      args: ArgsCreateOrganization,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => OrganizationPayload | null | Promise<OrganizationPayload | null>;

    deleteOrganization: (
      parent: undefined,
      args: ArgsDeleteOrganization,
      ctx: Context,
      info: GraphQLResolveInfo
    ) =>
      | SimpleOrganizationPayload
      | null
      | Promise<SimpleOrganizationPayload | null>;

    restoreOrganization: (
      parent: undefined,
      args: ArgsRestoreOrganization,
      ctx: Context,
      info: GraphQLResolveInfo
    ) =>
      | SimpleOrganizationPayload
      | null
      | Promise<SimpleOrganizationPayload | null>;

    updateOrganization: (
      parent: undefined,
      args: ArgsUpdateOrganization,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => OrganizationPayload | null | Promise<OrganizationPayload | null>;

    createProduct: (
      parent: undefined,
      args: ArgsCreateProduct,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => ProductPayload | null | Promise<ProductPayload | null>;

    deleteProduct: (
      parent: undefined,
      args: ArgsDeleteProduct,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => SimpleProductPayload | null | Promise<SimpleProductPayload | null>;

    restoreProduct: (
      parent: undefined,
      args: ArgsRestoreProduct,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => SimpleProductPayload | null | Promise<SimpleProductPayload | null>;

    updateProduct: (
      parent: undefined,
      args: ArgsUpdateProduct,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => ProductPayload | null | Promise<ProductPayload | null>;

    createUser: (
      parent: undefined,
      args: ArgsCreateUser,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => CreateUserPayload | null | Promise<CreateUserPayload | null>;

    deleteUser: (
      parent: undefined,
      args: ArgsDeleteUser,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => SimpleUserPayload | null | Promise<SimpleUserPayload | null>;

    restoreUser: (
      parent: undefined,
      args: ArgsRestoreUser,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => SimpleUserPayload | null | Promise<SimpleUserPayload | null>;

    updateUser: (
      parent: undefined,
      args: ArgsUpdateUser,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => UpdateUserPayload | null | Promise<UpdateUserPayload | null>;
  }
}

export namespace CreateCommentPayloadResolvers {
  export const defaultResolvers = {
    errors: (parent: CreateCommentPayload) => parent.errors
  };

  export type OperationResolver = (
    parent: CreateCommentPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Operation | Promise<Operation>;

  export type CommentResolver = (
    parent: CreateCommentPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Comment | null | Promise<Comment | null>;

  export type ErrorsResolver = (
    parent: CreateCommentPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => CreateCommentValidation | null | Promise<CreateCommentValidation | null>;

  export interface Type {
    operation: (
      parent: CreateCommentPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Operation | Promise<Operation>;

    comment: (
      parent: CreateCommentPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Comment | null | Promise<Comment | null>;

    errors: (
      parent: CreateCommentPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) =>
      | CreateCommentValidation
      | null
      | Promise<CreateCommentValidation | null>;
  }
}

export namespace OperationResolvers {
  export const defaultResolvers = {
    status: (parent: Operation) => parent.status,
    message: (parent: Operation) => parent.message
  };

  export type StatusResolver = (
    parent: Operation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export type MessageResolver = (
    parent: Operation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    status: (
      parent: Operation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;

    message: (
      parent: Operation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export namespace CreateCommentValidationResolvers {
  export const defaultResolvers = {
    body: (parent: CreateCommentValidation) =>
      parent.body === undefined ? null : parent.body,
    userId: (parent: CreateCommentValidation) =>
      parent.userId === undefined ? null : parent.userId,
    issueId: (parent: CreateCommentValidation) =>
      parent.issueId === undefined ? null : parent.issueId,
    parentId: (parent: CreateCommentValidation) =>
      parent.parentId === undefined ? null : parent.parentId
  };

  export type BodyResolver = (
    parent: CreateCommentValidation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type UserIdResolver = (
    parent: CreateCommentValidation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type IssueIdResolver = (
    parent: CreateCommentValidation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type ParentIdResolver = (
    parent: CreateCommentValidation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export interface Type {
    body: (
      parent: CreateCommentValidation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    userId: (
      parent: CreateCommentValidation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    issueId: (
      parent: CreateCommentValidation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    parentId: (
      parent: CreateCommentValidation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;
  }
}

export namespace SimpleCommentPayloadResolvers {
  export const defaultResolvers = {
    operation: (parent: SimpleCommentPayload) => parent.operation,
    comment: (parent: SimpleCommentPayload) => parent.comment
  };

  export type OperationResolver = (
    parent: SimpleCommentPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Operation | Promise<Operation>;

  export type CommentResolver = (
    parent: SimpleCommentPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Comment | null | Promise<Comment | null>;

  export interface Type {
    operation: (
      parent: SimpleCommentPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Operation | Promise<Operation>;

    comment: (
      parent: SimpleCommentPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Comment | null | Promise<Comment | null>;
  }
}

export namespace UpdateCommentPayloadResolvers {
  export const defaultResolvers = {
    errors: (parent: UpdateCommentPayload) => parent.errors
  };

  export type OperationResolver = (
    parent: UpdateCommentPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Operation | Promise<Operation>;

  export type CommentResolver = (
    parent: UpdateCommentPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Comment | null | Promise<Comment | null>;

  export type ErrorsResolver = (
    parent: UpdateCommentPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => UpdateCommentValidation | null | Promise<UpdateCommentValidation | null>;

  export interface Type {
    operation: (
      parent: UpdateCommentPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Operation | Promise<Operation>;

    comment: (
      parent: UpdateCommentPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Comment | null | Promise<Comment | null>;

    errors: (
      parent: UpdateCommentPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) =>
      | UpdateCommentValidation
      | null
      | Promise<UpdateCommentValidation | null>;
  }
}

export namespace UpdateCommentValidationResolvers {
  export const defaultResolvers = {
    body: (parent: UpdateCommentValidation) =>
      parent.body === undefined ? null : parent.body
  };

  export type BodyResolver = (
    parent: UpdateCommentValidation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export interface Type {
    body: (
      parent: UpdateCommentValidation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;
  }
}

export namespace IssuePayloadResolvers {
  export const defaultResolvers = {
    errors: (parent: IssuePayload) => parent.errors
  };

  export type OperationResolver = (
    parent: IssuePayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Operation | Promise<Operation>;

  export type IssueResolver = (
    parent: IssuePayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Issue | null | Promise<Issue | null>;

  export type ErrorsResolver = (
    parent: IssuePayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => IssueValidation | null | Promise<IssueValidation | null>;

  export interface Type {
    operation: (
      parent: IssuePayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Operation | Promise<Operation>;

    issue: (
      parent: IssuePayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Issue | null | Promise<Issue | null>;

    errors: (
      parent: IssuePayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => IssueValidation | null | Promise<IssueValidation | null>;
  }
}

export namespace IssueValidationResolvers {
  export const defaultResolvers = {
    title: (parent: IssueValidation) =>
      parent.title === undefined ? null : parent.title,
    body: (parent: IssueValidation) =>
      parent.body === undefined ? null : parent.body,
    userId: (parent: IssueValidation) =>
      parent.userId === undefined ? null : parent.userId,
    productId: (parent: IssueValidation) =>
      parent.productId === undefined ? null : parent.productId
  };

  export type TitleResolver = (
    parent: IssueValidation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type BodyResolver = (
    parent: IssueValidation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type UserIdResolver = (
    parent: IssueValidation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type ProductIdResolver = (
    parent: IssueValidation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export interface Type {
    title: (
      parent: IssueValidation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    body: (
      parent: IssueValidation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    userId: (
      parent: IssueValidation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    productId: (
      parent: IssueValidation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;
  }
}

export namespace SimpleIssuePayloadResolvers {
  export const defaultResolvers = {
    operation: (parent: SimpleIssuePayload) => parent.operation,
    issue: (parent: SimpleIssuePayload) => parent.issue
  };

  export type OperationResolver = (
    parent: SimpleIssuePayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Operation | Promise<Operation>;

  export type IssueResolver = (
    parent: SimpleIssuePayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Issue | null | Promise<Issue | null>;

  export interface Type {
    operation: (
      parent: SimpleIssuePayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Operation | Promise<Operation>;

    issue: (
      parent: SimpleIssuePayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Issue | null | Promise<Issue | null>;
  }
}

export namespace OrganizationPayloadResolvers {
  export const defaultResolvers = {
    errors: (parent: OrganizationPayload) => parent.errors
  };

  export type OperationResolver = (
    parent: OrganizationPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Operation | Promise<Operation>;

  export type OrganizationResolver = (
    parent: OrganizationPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Organization | null | Promise<Organization | null>;

  export type ErrorsResolver = (
    parent: OrganizationPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => OrganizationValidation | null | Promise<OrganizationValidation | null>;

  export interface Type {
    operation: (
      parent: OrganizationPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Operation | Promise<Operation>;

    organization: (
      parent: OrganizationPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Organization | null | Promise<Organization | null>;

    errors: (
      parent: OrganizationPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => OrganizationValidation | null | Promise<OrganizationValidation | null>;
  }
}

export namespace OrganizationValidationResolvers {
  export const defaultResolvers = {
    name: (parent: OrganizationValidation) =>
      parent.name === undefined ? null : parent.name,
    bio: (parent: OrganizationValidation) =>
      parent.bio === undefined ? null : parent.bio
  };

  export type NameResolver = (
    parent: OrganizationValidation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type BioResolver = (
    parent: OrganizationValidation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export interface Type {
    name: (
      parent: OrganizationValidation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    bio: (
      parent: OrganizationValidation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;
  }
}

export namespace SimpleOrganizationPayloadResolvers {
  export const defaultResolvers = {
    operation: (parent: SimpleOrganizationPayload) => parent.operation,
    organization: (parent: SimpleOrganizationPayload) => parent.organization
  };

  export type OperationResolver = (
    parent: SimpleOrganizationPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Operation | Promise<Operation>;

  export type OrganizationResolver = (
    parent: SimpleOrganizationPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Organization | null | Promise<Organization | null>;

  export interface Type {
    operation: (
      parent: SimpleOrganizationPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Operation | Promise<Operation>;

    organization: (
      parent: SimpleOrganizationPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Organization | null | Promise<Organization | null>;
  }
}

export namespace ProductPayloadResolvers {
  export const defaultResolvers = {
    errors: (parent: ProductPayload) => parent.errors
  };

  export type OperationResolver = (
    parent: ProductPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Operation | Promise<Operation>;

  export type ProductResolver = (
    parent: ProductPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Product | null | Promise<Product | null>;

  export type ErrorsResolver = (
    parent: ProductPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => ProductValidation | null | Promise<ProductValidation | null>;

  export interface Type {
    operation: (
      parent: ProductPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Operation | Promise<Operation>;

    product: (
      parent: ProductPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Product | null | Promise<Product | null>;

    errors: (
      parent: ProductPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => ProductValidation | null | Promise<ProductValidation | null>;
  }
}

export namespace ProductValidationResolvers {
  export const defaultResolvers = {
    name: (parent: ProductValidation) =>
      parent.name === undefined ? null : parent.name,
    description: (parent: ProductValidation) =>
      parent.description === undefined ? null : parent.description,
    ownerId: (parent: ProductValidation) =>
      parent.ownerId === undefined ? null : parent.ownerId
  };

  export type NameResolver = (
    parent: ProductValidation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type DescriptionResolver = (
    parent: ProductValidation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type OwnerIdResolver = (
    parent: ProductValidation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export interface Type {
    name: (
      parent: ProductValidation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    description: (
      parent: ProductValidation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    ownerId: (
      parent: ProductValidation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;
  }
}

export namespace SimpleProductPayloadResolvers {
  export const defaultResolvers = {
    operation: (parent: SimpleProductPayload) => parent.operation,
    product: (parent: SimpleProductPayload) => parent.product
  };

  export type OperationResolver = (
    parent: SimpleProductPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Operation | Promise<Operation>;

  export type ProductResolver = (
    parent: SimpleProductPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Product | null | Promise<Product | null>;

  export interface Type {
    operation: (
      parent: SimpleProductPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Operation | Promise<Operation>;

    product: (
      parent: SimpleProductPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Product | null | Promise<Product | null>;
  }
}

export namespace CreateUserPayloadResolvers {
  export const defaultResolvers = {
    errors: (parent: CreateUserPayload) => parent.errors
  };

  export type OperationResolver = (
    parent: CreateUserPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Operation | Promise<Operation>;

  export type UserResolver = (
    parent: CreateUserPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>;

  export type ErrorsResolver = (
    parent: CreateUserPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => CreateUserValidation | null | Promise<CreateUserValidation | null>;

  export interface Type {
    operation: (
      parent: CreateUserPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Operation | Promise<Operation>;

    user: (
      parent: CreateUserPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | null | Promise<User | null>;

    errors: (
      parent: CreateUserPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => CreateUserValidation | null | Promise<CreateUserValidation | null>;
  }
}

export namespace CreateUserValidationResolvers {
  export const defaultResolvers = {
    firstName: (parent: CreateUserValidation) =>
      parent.firstName === undefined ? null : parent.firstName,
    lastName: (parent: CreateUserValidation) =>
      parent.lastName === undefined ? null : parent.lastName,
    gender: (parent: CreateUserValidation) =>
      parent.gender === undefined ? null : parent.gender,
    username: (parent: CreateUserValidation) =>
      parent.username === undefined ? null : parent.username,
    password: (parent: CreateUserValidation) =>
      parent.password === undefined ? null : parent.password,
    passwordConfirmation: (parent: CreateUserValidation) =>
      parent.passwordConfirmation === undefined
        ? null
        : parent.passwordConfirmation,
    email: (parent: CreateUserValidation) =>
      parent.email === undefined ? null : parent.email,
    bio: (parent: CreateUserValidation) =>
      parent.bio === undefined ? null : parent.bio
  };

  export type FirstNameResolver = (
    parent: CreateUserValidation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type LastNameResolver = (
    parent: CreateUserValidation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type GenderResolver = (
    parent: CreateUserValidation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type UsernameResolver = (
    parent: CreateUserValidation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type PasswordResolver = (
    parent: CreateUserValidation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type PasswordConfirmationResolver = (
    parent: CreateUserValidation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type EmailResolver = (
    parent: CreateUserValidation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type BioResolver = (
    parent: CreateUserValidation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export interface Type {
    firstName: (
      parent: CreateUserValidation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    lastName: (
      parent: CreateUserValidation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    gender: (
      parent: CreateUserValidation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    username: (
      parent: CreateUserValidation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    password: (
      parent: CreateUserValidation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    passwordConfirmation: (
      parent: CreateUserValidation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    email: (
      parent: CreateUserValidation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    bio: (
      parent: CreateUserValidation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;
  }
}

export namespace SimpleUserPayloadResolvers {
  export const defaultResolvers = {
    operation: (parent: SimpleUserPayload) => parent.operation,
    user: (parent: SimpleUserPayload) => parent.user
  };

  export type OperationResolver = (
    parent: SimpleUserPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Operation | Promise<Operation>;

  export type UserResolver = (
    parent: SimpleUserPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>;

  export interface Type {
    operation: (
      parent: SimpleUserPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Operation | Promise<Operation>;

    user: (
      parent: SimpleUserPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | null | Promise<User | null>;
  }
}

export namespace UpdateUserPayloadResolvers {
  export const defaultResolvers = {
    errors: (parent: UpdateUserPayload) => parent.errors
  };

  export type OperationResolver = (
    parent: UpdateUserPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Operation | Promise<Operation>;

  export type UserResolver = (
    parent: UpdateUserPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>;

  export type ErrorsResolver = (
    parent: UpdateUserPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => UpdateUserValidation | null | Promise<UpdateUserValidation | null>;

  export interface Type {
    operation: (
      parent: UpdateUserPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Operation | Promise<Operation>;

    user: (
      parent: UpdateUserPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | null | Promise<User | null>;

    errors: (
      parent: UpdateUserPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => UpdateUserValidation | null | Promise<UpdateUserValidation | null>;
  }
}

export namespace UpdateUserValidationResolvers {
  export const defaultResolvers = {
    firstName: (parent: UpdateUserValidation) =>
      parent.firstName === undefined ? null : parent.firstName,
    lastName: (parent: UpdateUserValidation) =>
      parent.lastName === undefined ? null : parent.lastName,
    gender: (parent: UpdateUserValidation) =>
      parent.gender === undefined ? null : parent.gender,
    username: (parent: UpdateUserValidation) =>
      parent.username === undefined ? null : parent.username,
    email: (parent: UpdateUserValidation) =>
      parent.email === undefined ? null : parent.email,
    bio: (parent: UpdateUserValidation) =>
      parent.bio === undefined ? null : parent.bio
  };

  export type FirstNameResolver = (
    parent: UpdateUserValidation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type LastNameResolver = (
    parent: UpdateUserValidation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type GenderResolver = (
    parent: UpdateUserValidation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type UsernameResolver = (
    parent: UpdateUserValidation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type EmailResolver = (
    parent: UpdateUserValidation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type BioResolver = (
    parent: UpdateUserValidation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export interface Type {
    firstName: (
      parent: UpdateUserValidation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    lastName: (
      parent: UpdateUserValidation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    gender: (
      parent: UpdateUserValidation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    username: (
      parent: UpdateUserValidation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    email: (
      parent: UpdateUserValidation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    bio: (
      parent: UpdateUserValidation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  Comment: CommentResolvers.Type;
  User: UserResolvers.Type;
  Product: ProductResolvers.Type;
  Organization: OrganizationResolvers.Type;
  Issue: IssueResolvers.Type;
  CommentConnection: CommentConnectionResolvers.Type;
  PageInfo: PageInfoResolvers.Type;
  CommentEdge: CommentEdgeResolvers.Type;
  IssueConnection: IssueConnectionResolvers.Type;
  IssueEdge: IssueEdgeResolvers.Type;
  OrganizationConnection: OrganizationConnectionResolvers.Type;
  OrganizationEdge: OrganizationEdgeResolvers.Type;
  ProductConnection: ProductConnectionResolvers.Type;
  ProductEdge: ProductEdgeResolvers.Type;
  UserConnection: UserConnectionResolvers.Type;
  UserEdge: UserEdgeResolvers.Type;
  Mutation: MutationResolvers.Type;
  CreateCommentPayload: CreateCommentPayloadResolvers.Type;
  Operation: OperationResolvers.Type;
  CreateCommentValidation: CreateCommentValidationResolvers.Type;
  SimpleCommentPayload: SimpleCommentPayloadResolvers.Type;
  UpdateCommentPayload: UpdateCommentPayloadResolvers.Type;
  UpdateCommentValidation: UpdateCommentValidationResolvers.Type;
  IssuePayload: IssuePayloadResolvers.Type;
  IssueValidation: IssueValidationResolvers.Type;
  SimpleIssuePayload: SimpleIssuePayloadResolvers.Type;
  OrganizationPayload: OrganizationPayloadResolvers.Type;
  OrganizationValidation: OrganizationValidationResolvers.Type;
  SimpleOrganizationPayload: SimpleOrganizationPayloadResolvers.Type;
  ProductPayload: ProductPayloadResolvers.Type;
  ProductValidation: ProductValidationResolvers.Type;
  SimpleProductPayload: SimpleProductPayloadResolvers.Type;
  CreateUserPayload: CreateUserPayloadResolvers.Type;
  CreateUserValidation: CreateUserValidationResolvers.Type;
  SimpleUserPayload: SimpleUserPayloadResolvers.Type;
  UpdateUserPayload: UpdateUserPayloadResolvers.Type;
  UpdateUserValidation: UpdateUserValidationResolvers.Type;
}
