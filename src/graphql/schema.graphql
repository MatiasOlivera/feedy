# Queries

"""
Root query type
"""
type Query {
  """
  Fetch a user by his id
  """
  user(id: ID!): User

  """
  Fetch a list of users
  """
  users(
    page: Int = 1
    limit: Int = 10
    orderBy: String = "id"
    direction: ORDER = ASC
  ): [User!]

  """
  Fetch an organization by its id
  """
  organization(id: ID!): Organization

  """
  Fetch a list of organizations
  """
  organizations(
    page: Int = 1
    limit: Int = 10
    orderBy: String = "id"
    direction: ORDER = ASC
  ): [Organization!]

  """
  Fetch a product by its id
  """
  product(id: ID!): Product

  """
  Fetch a list of products
  """
  products(
    page: Int = 1
    limit: Int = 10
    orderBy: String = "id"
    direction: ORDER = ASC
  ): [Product!]

  """
  Fetch an issue by its id
  """
  issue(id: ID!): Issue

  """
  Fetch a list of issues
  """
  issues(
    page: Int = 1
    limit: Int = 10
    orderBy: String = "id"
    direction: ORDER = ASC
  ): [Issue!]

  """
  Fetch a comment by its id
  """
  comment(id: ID!): Comment

  """
  Fetch a list of comments
  """
  comments(
    page: Int = 1
    limit: Int = 10
    orderBy: String = "id"
    direction: ORDER = ASC
  ): [Comment!]
}

# Mutations

"""
Root mutation type
"""
type Mutation {
  """
  Create a new user
  """
  createUser(user: CreateUserInput!): CreateUserPayload

  """
  Update an existing user
  """
  updateUser(id: ID!, user: UpdateUserInput!): UpdateUserPayload

  """
  Delete an existing user
  """
  deleteUser(id: ID!): DeleteUserPayload
}

# Objects

"""
An user
"""
type User implements Entity {
  """
  The identifier
  """
  id: ID!
  """
  The first name. Eg. John
  """
  firstName: String!
  """
  The last name. Eg. Doe
  """
  lastName: String!
  """
  The full name. Eg. John Doe
  """
  fullName: String!
  """
  The gender. Eg. Male
  """
  gender: GENDER!
  """
  The username. Eg. JohnDoe
  """
  username: String!
  """
  The email adress. Eg. johndoe@email.com
  """
  email: String!
  """
  The biography or presentation. Eg. I am a developer
  """
  bio: String
  """
  The date it was created in ISO8601 format
  """
  createdAt: Date!
  """
  The date it was last updated in ISO8601 format
  """
  updatedAt: Date!
  """
  The products or services that belong to the user
  """
  products: [Product!]
  """
  The organizations to which the user belongs
  """
  organizations: [Organization!]
  """
  The issues initialized by the user
  """
  issues: [Issue!]
  """
  The comments written by the user
  """
  comments: [Comment!]
}

"""
The possible validation errors returned when creating a user
"""
type CreateUserValidation {
  """
  The validation error of the first name
  """
  firstName: String
  """
  The validation error of the last name
  """
  lastName: String
  """
  The validation error of the gender
  """
  gender: String
  """
  The validation error of the username
  """
  username: String
  """
  The validation error of the password
  """
  password: String
  """
  The validation error of the password confirmation
  """
  passwordConfirmation: String
  """
  The validation error of the email
  """
  email: String
  """
  The validation error of the biography
  """
  bio: String
}

"""
The payload returned when a new user is created
"""
type CreateUserPayload {
  """
  The status of the operation
  """
  operation: Operation!
  """
  The created user
  """
  user: User
  """
  The validation errors
  """
  errors: CreateUserValidation
}

"""
The possible validation errors returned when updating a user
"""
type UpdateUserValidation {
  """
  The validation error of the first name
  """
  firstName: String
  """
  The validation error of the last name
  """
  lastName: String
  """
  The validation error of the gender
  """
  gender: String
  """
  The validation error of the username
  """
  username: String
  """
  The validation error of the email
  """
  email: String
  """
  The validation error of the biography
  """
  bio: String
}

"""
The payload returned when a user is updated
"""
type UpdateUserPayload {
  """
  The status of the operation
  """
  operation: Operation!
  """
  The updated user
  """
  user: User
  """
  The validation errors
  """
  errors: UpdateUserValidation
}

"""
The payload returned when a user is deleted
"""
type DeleteUserPayload {
  """
  The status of the operation
  """
  operation: Operation!
  """
  The deleted user
  """
  user: User
}

"""
An organization. Eg. a company
"""
type Organization implements Entity {
  """
  The identifier
  """
  id: ID!
  """
  The name. Eg. Tesla Motors
  """
  name: String!
  """
  The main activity. Eg. Manufacturer of electric vehicles
  """
  bio: String
  """
  The date it was created in ISO8601 format
  """
  createdAt: Date!
  """
  The date it was last updated in ISO8601 format
  """
  updatedAt: Date!
  """
  The products or services that belong to the organization
  """
  products: [Product!]
  """
  Users who are members of the organization
  """
  members: [User!]!
}

"""
A product or a service
"""
type Product implements Entity {
  """
  The identifier
  """
  id: ID!
  """
  The name. Eg. Model S
  """
  name: String!
  """
  The description. Eg. High-end electric liftback
  """
  description: String
  """
  The date it was created in ISO8601 format
  """
  createdAt: Date!
  """
  The date it was last updated in ISO8601 format
  """
  updatedAt: Date!
  """
  The user or organization that owns the product
  """
  owner: ProductOwner!
  """
  The issues of the product
  """
  issues: [Issue!]
}

"""
A thread created by a user
"""
type Issue implements Entity {
  """
  The identifier
  """
  id: ID!
  """
  The title of the issue
  """
  title: String!
  """
  The detailed explanation of the issue
  """
  body: String!
  """
  The date it was created in ISO8601 format
  """
  createdAt: Date!
  """
  The date it was last updated in ISO8601 format
  """
  updatedAt: Date!
  """
  The user who started the thread
  """
  author: User!
  """
  The product that is discussed in the issue
  """
  product: Product!
  """
  The comments made by users
  """
  comments: [Comment!]
}

"""
A comment created by a user
"""
type Comment implements Entity {
  """
  The identifier
  """
  id: ID!
  """
  The comment itself
  """
  body: String!
  """
  The date it was created in ISO8601 format
  """
  createdAt: Date!
  """
  The date it was last updated in ISO8601 format
  """
  updatedAt: Date!
  """
  The user who wrote the comment
  """
  author: User!
  """
  The thread to which it belongs
  """
  issue: Issue
  """
  The comment that is being answered
  """
  parent: Comment
  """
  Comments that respond to this comment
  """
  children: [Comment!]
}

"""
The result of a mutation or query
"""
type Operation {
  """
  The operation was completed or not
  """
  status: Boolean!
  """
  A message describing the operation result
  """
  message: String!
}

# Inputs

"""
The properties needed to create a new user
"""
input CreateUserInput {
  """
  The first name
  """
  firstName: String!
  """
  The last name
  """
  lastName: String!
  """
  The gender
  """
  gender: GENDER!
  """
  The username
  """
  username: String!
  """
  The password
  """
  password: String!
  """
  The password confirmation
  """
  passwordConfirmation: String!
  """
  The email address
  """
  email: String!
  """
  The biography
  """
  bio: String
}

"""
The properties used to update an existing user
"""
input UpdateUserInput {
  """
  The first name
  """
  firstName: String
  """
  The last name
  """
  lastName: String
  """
  The gender
  """
  gender: GENDER
  """
  The username
  """
  username: String
  """
  The email address
  """
  email: String
  """
  The biography
  """
  bio: String
}

# Unions

"""
The owner of a product
"""
union ProductOwner = User | Organization

# Interfaces

"""
The base model
"""
interface Entity {
  """
  The identifier
  """
  id: ID!
  """
  The date it was created in ISO8601 format
  """
  createdAt: Date!
  """
  The date it was last updated in ISO8601 format
  """
  updatedAt: Date!
}

# Custom scalars

"""
A date
"""
scalar Date

# Enums

"""
The gender
"""
enum GENDER {
  """
  Female
  """
  FEMALE
  """
  Male
  """
  MALE
  """
  Other
  """
  OTHER
}

"""
The sort direction
"""
enum ORDER {
  """
  Ascending
  """
  ASC
  """
  Descending
  """
  DESC
}
