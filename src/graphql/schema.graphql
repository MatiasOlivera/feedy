# Queries

type Query {
  user(id: ID!): User
  users(
    page: Int = 1
    limit: Int = 10
    orderBy: String = "id"
    direction: ORDER = ASC
  ): [User!]

  organization(id: ID!): Organization
  organizations(
    page: Int = 1
    limit: Int = 10
    orderBy: String = "id"
    direction: ORDER = ASC
  ): [Organization!]

  product(id: ID!): Product
  products(
    page: Int = 1
    limit: Int = 10
    orderBy: String = "id"
    direction: ORDER = ASC
  ): [Product!]

  issue(id: ID!): Issue
  issues(
    page: Int = 1
    limit: Int = 10
    orderBy: String = "id"
    direction: ORDER = ASC
  ): [Issue!]

  comment(id: ID!): Comment
  comments(
    page: Int = 1
    limit: Int = 10
    orderBy: String = "id"
    direction: ORDER = ASC
  ): [Comment!]
}

# Mutations

type Mutation {
  createUser(user: CreateUserInput!): CreateUserPayload
  updateUser(id: ID!, user: UpdateUserInput!): UpdateUserPayload
  deleteUser(id: ID!): DeleteUserPayload
}

# Objects

"""
An user
"""
type User implements Entity {
  id: ID!
  firstName: String!
  lastName: String!
  fullName: String!
  gender: GENDER!
  username: String!
  email: String!
  bio: String
  createdAt: Date!
  updatedAt: Date!
  products: [Product!]
  organizations: [Organization!]
  issues: [Issue!]
  comments: [Comment!]
}

type CreateUserValidation {
  firstName: String
  lastName: String
  gender: String
  username: String
  password: String
  passwordConfirmation: String
  email: String
  bio: String
}

type CreateUserPayload {
  operation: Operation!
  user: User
  errors: CreateUserValidation
}

type UpdateUserValidation {
  firstName: String
  lastName: String
  gender: String
  username: String
  email: String
  bio: String
}

type UpdateUserPayload {
  operation: Operation!
  user: User
  errors: UpdateUserValidation
}

type DeleteUserPayload {
  operation: Operation!
  user: User
}

"""
An organization. Eg. a company
"""
type Organization implements Entity {
  id: ID!
  name: String!
  bio: String
  createdAt: Date!
  updatedAt: Date!
  products: [Product!]
  members: [User!]!
}

"""
A product or a service
"""
type Product implements Entity {
  id: ID!
  name: String!
  description: String
  createdAt: Date!
  updatedAt: Date!
  owner: ProductOwner!
  issues: [Issue!]
}

"""
A thread created by a user
"""
type Issue implements Entity {
  id: ID!
  title: String!
  body: String!
  createdAt: Date!
  updatedAt: Date!
  author: User!
  product: Product!
  comments: [Comment!]
}

"""
A comment created by a user
"""
type Comment implements Entity {
  id: ID!
  body: String!
  createdAt: Date!
  updatedAt: Date!
  author: User!
  issue: Issue
  parent: Comment
  children: [Comment!]
}

type Operation {
  status: Boolean!
  message: String!
}

# Inputs

input CreateUserInput {
  firstName: String!
  lastName: String!
  gender: GENDER!
  username: String!
  password: String!
  passwordConfirmation: String!
  email: String!
  bio: String
}

input UpdateUserInput {
  firstName: String
  lastName: String
  gender: GENDER
  username: String
  email: String
  bio: String
}

# Unions

union ProductOwner = User | Organization

# Interfaces

interface Entity {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
}

# Custom scalars

scalar Date

# Enums

enum GENDER {
  Female
  Male
  Other
}

enum ORDER {
  ASC
  DESC
}
